---
title: "workout03"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
```
#Private Checker Functions
```{r}
# a private auxiliary function check_prob() to test if an input prob is a valid probability value (i.e. 0 ≤ p ≤ 1)
check_prob <- function(prob) {
  if (!is.numeric(prob)) {
    stop('invalid prob input(should be a number)')
  }
  if (prob < 0 | prob > 1) {
    stop('p has to be a number betwen 0 and 1')
  }
  return (TRUE)
}

# a private auxiliary function check_trials() to test if an input trials is a valid value for number of trials (i.e. n is a non-negative integer)
check_trials <- function(trials) {
  if (!is.numeric(trials)) {
    stop('invalid trial input(should be a number)')
  }
  if (!trials%%1 == 0) {
    stop('trial should be an integer')
  }
  if (trials < 0) {
    stop('trial has to be a non-negative number')
  }
  return (TRUE)
}

#a private auxiliary function check_success() to test if an input success is a valid value for number of successes (i.e. 0 ≤ k ≤ n).
check_success <- function(success, trials) {
  if (!is.numeric(success)) {
    stop('invalid success input(should be a number)')
  }
  if (prod(success%%1 == 0) != 1) {
    stop('invalid success(should be a integer)')
  }
  if (prod(success >= 0) != 1) {
    stop('invalid success(should be non-negative)')
  } 
  if(prod(success <= trials) != 1) {
    stop('success cannot be greater than trials')
  }
  return (TRUE)
}
```
#Private Auxiliary Functions
```{r}
# a private auxiliary function aux_mean() that take two arguments: trials and prob, and return the corresponding value from the computed summary measure 
aux_mean <- function(trials, prob){
  return(trials*prob)
}

# a private auxiliary function aux_variance() that take two arguments: trials and prob, and return the corresponding value from the computed summary measure 
aux_variance <- function(trials, prob) {
  return (trials*prob*(1-prob))
}

# a private auxiliary function aux_mode() that take two arguments: trials and prob, and return the corresponding value from the computed summary measure 
aux_mode <- function(trials, prob){
  m <- trials*prob + prob
  if(m%%1 == 0){
    return (c(m, m-1))
  }
  return (floor(m))
}

# a private auxiliary function aux_skewness() that take two arguments: trials and prob, and return the corresponding value from the computed summary measure 
aux_skewness <- function(trials, prob) {
  sd <- sqrt(trials*prob*(1-prob))
  return ((1-2*prob)/sd)
}

# a private auxiliary function aux_kurtosis() that take two arguments: trials and prob, and return the corresponding value from the computed summary measure 
aux_kurtosis <- function(trials, prob) {
  var <- trials*prob*(1-prob)
  a <- prob*(1-prob)
  return((1-6*a)/var)
}

#tests
aux_mean(10, 0.3)
aux_variance(10, 0.3)
aux_mode(10, 0.3)
aux_skewness(10, 0.3)
aux_kurtosis(10, 0.3)
```
#Function bin_choose()
```{r}
#' @title Binomial Choose Function
#' @description calculates the number of combinations in which k successes can occur in n trials.
#' @param n the numeric vector of total trials
#' @param k the numeric vector of success
#' @return computed combinations
#' @examples bin_choose(10, 3)
#' @export
bin_choose <- function(n, k){
  if (prod(k <= n) !=1) {
    stop('k cannot be greater than n')
  }
  b <- factorial(k)*factorial(n-k)
  return (factorial(n)/b)
}

#tests
bin_choose(n = 5, k = 2) 
bin_choose(5, 0) 
bin_choose(5, 1:3)
```
#Function bin_probability()
```{r}
#' @title Binomial Probability Function
#' @description calculates the number of combinations in which k successes can occur in n trials
#' @param success the numeric vector of success
#' @param trials the numeric vector of total trials
#' @param prob the numeric vector of probability for success of one single trial
#' @return computed probabilities
#' @examples bin_probability(3, 10, 0.5)
#' @export
bin_probability <- function(success, trials, prob){
  if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  if (!check_success(success, trials)) {
    stop('invalid success value')
  }
  c <- bin_choose(trials, success)
  d <- prob^success * (1-prob)^(trials-success)
  return (c*d)
}

#tests
bin_probability(success = 2, trials = 5, prob = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability(success = 55, trials = 100, prob = 0.45)
```
#Function bin_distribution() & Function plot.bindis()
```{r}
#' @title Binomial Distribution Function
#' @description output a data frame with the probability distribution: sucesses in the first column, probability in the second column
#' @param trials the numeric vector of total trials
#' @param prob the numeric vector of probability for success of one single trial
#' @return the returned output: a data.frame with two classes: c("bindis", "data.frame")
#' @examples bin_distribution(10, 0.5)
#' @export
bin_distribution <- function(trials, prob){
  success <- 0:trials
  probability <- bin_probability(success, trials, prob)
  dat1 <- data.frame(cbind(success, probability))
  class(dat1) <- c("bindis","data.frame")
  return (dat1)
}

#tests
bin_distribution(trials = 5, prob = 0.5)

#a plotting method function: plot.bindis() that graphs a barplot to display the probability histogram of a binomial distribution object "bindis"
#' @export
plot.bindis <- function(df) {
  prob <- df$probability
  names(prob) <- df$success
  barplot(prob, xlab = "successes", ylab = "probability", main = "Binomial Distribution Barplot")
}

#tests
dis1 <- bin_distribution(trials = 5, prob = 0.5) 
plot(dis1)
```
#Function bin_cumulative() & Function plot.bincum()
```{r}
#' @title Binomial Cumulative Function
#' @description output a data frame with both the probability distribution and the cumulative probabilities: sucesses in the first column, probability in the second column, and cumulative in the third column
#' @param trials the numeric vector of total trials
#' @param prob the numeric vector of probability for success of one single trial
#' @return the returned output: a data.frame with two classes: c("bincum", "data.frame")
#' @examples bin_cumulative(10, 0.3)
#' @export

bin_cumulative <- function(trials, prob) {
  dat2 <- bin_distribution(trials, prob)
  dat2$cumulative <- cumsum(dat2$probability)
  class(dat2) <- c("bincum", "data.frame")
  return(dat2)
}

#tests
bin_cumulative(trials = 5, prob = 0.5)

#a plotting method function: plot.bincum() that graphs the cumulative distribution in ab object "bincum"
#' @export
plot.bincum <- function(df) {
  x <- df$success
  y <- df$cumulative
  plot(x, y, xlab = "successes", ylab = "probability", main = "Binomial Cumulative Distribution", type = "o")
}

#tests
dis2 <- bin_cumulative(trials = 5, prob = 0.5) 
plot(dis2)
```
#Function bin_variable()
```{r}
#' @title Binomial Variable Function
#' @description output an object of class "binvar" with both the probability distribution and the cumulative probabilities: sucesses in the first column, probability in the second column, and cumulative in the third column
#' @param trials the numeric vector of total trials
#' @param prob the numeric vector of probability for success of one single trial
#' @return returned object of a list with named elements: trials and prob
#' @examples bin_variable(10, 0.3)
#' @export
bin_variable <- function(trials, prob){
  if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if(!check_prob(prob)) {
    stop('invalid probability value')
  }
  list <- list(trials = trials, prob = prob)
  class(list) <- "binvar"
  return(list)
}

#a method function print.binvar() to be able to nicely print the content of an object "binvar"
#' @export
print.binvar <- function(obj){
  cat('Binomial Variable:')
  cat('\n\nParameters')
  cat('\n - number of trials: ')
  cat(obj$trials)
  cat('\n - prob of success : ')
  cat(obj$prob)
}

#tests
bin1 <- bin_variable(trials = 10, prob = 0.3)
bin1

#a method function summary.binvar() to get a full summary description of an object "summary.binvar"
#' @export
summary.binvar <- function(obj){
  t <- obj$trials
  p <- obj$prob
  mean <- aux_mean(t, p)
  var <- aux_variance(t, p)
  mode <- aux_mode(t, p)
  ske <- aux_skewness(t, p)
  kur <- aux_kurtosis(t, p)
  list <- list(trials = t, prob = p, mean = mean, varianec = var, mode = mode, skewness = ske, kurtosis = kur)
  class(list) <- "summary.binvar"
  return(list)
}

#a method function print.binvar() to be able to nicely print the content of an object "summary.binvar"
#' @export
print.summary.binvar <- function(obj){
  cat('Binomial Variable:')
  cat('\n\nParameters')
  cat('\n- number of trials: ')
  cat(obj$trials)
  cat('\n- prob of success : ')
  cat(obj$prob)
  cat('\n\nMeasures')
  cat('\n- mean    : ')
  cat(obj$mean)
  cat('\n- variance: ')
  cat(obj$var)
  cat('\n- mode    : ')
  cat(obj$mode)
  cat('\n- skewness: ')
  cat(obj$skewness)
  cat('\n- kurtosis: ')
  cat(obj$kurtosis)
}

#tests
bin1 <- bin_variable(trials = 10, p = 0.3) 
binsum1 <- summary(bin1)
binsum1
```
#Functions of measures
```{r}
bin_mean <- function(trials, prob){
   if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  return(aux_mean(trials, prob))
}

bin_variance <- function(trials, prob){
   if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  return(aux_variance(trials, prob))
}

bin_mode <- function(trials, prob){
   if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  return(aux_mode(trials, prob))
}

bin_skewness <- function(trials, prob){
   if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  return(aux_skewness(trials, prob))
}

bin_kurtosis <- function(trials, prob){
   if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid probability value')
  }
  return(aux_kurtosis(trials, prob))
}

#tests
bin_mean(10, 0.3)
bin_variance(10, 0.3)
bin_mode(10, 0.3)
bin_skewness(10, 0.3)
bin_kurtosis(10, 0.3)
```
#Tests
```{r}
context("Check checkers")

test_that("check_prob fails with invalid args",{
  
  expect_true(check_prob(0.3))
  expect_error(check_prob(2))
  expect_error(check_prob(-0.3),
               "\nprob should be a number between 0 and 1")
})

test_that("check_trials fails with invalid args", {
  
  expect_true(check_trials(10))
  expect_error(check_trials(-10))
  expect_error(check_trials(10.3),
               "\ntrials should be a non-negative integer")
})

test_that("check_success fails with invalid args", {
  
  expect_true(check_success(3, 10))
  expect_error(check_success(-1, 10), 
               "\nsuccess should be non-negative integer(s)")
  expect_error(check_success(6, 5),
               "\nsuccess should be less than or equal to trials")
})

context("Check summary measures")

test_that("function aux_mean returns correct results", {

  expect_equal(aux_mean(10, 0.3),
               3)
  expect_equal(aux_mean(5, 0.3),
               1.5)
  expect_equal(aux_mean(10, 0.5),
               5)
})

test_that("function aux_variance returns correct results", {

  expect_equal(aux_variance(10, 0.3),
               2.1)
  expect_equal(aux_variance(5, 0.3),
               1.05)
  expect_equal(aux_variance(10, 0.5),
               2.5)
})

test_that("function aux_mode returns correct results", {

  expect_equal(aux_mode(10, 0.3),
               3
  expect_equal(aux_mode(5, 0.3),
               1)
  expect_equal(aux_mode(10, 0.5),
               5)
})

test_that("function aux_skewness returns correct results", {

  expect_equal(aux_skewness(10, 0.3),
               0.2760262)
  expect_equal(aux_skewness(5, 0.3),
               0.39036)
  expect_equal(aux_skewness(10, 0.5),
               0)
})

test_that("private function aux_kurtosis produces correct results", {

  expect_equal(aux_kurtosis(10, 0.3),
               -0.1238095)
  expect_equal(aux_kurtosis(5, 0.3),
               -0.247619)
  expect_equal(aux_kurtosis(10, 0.5),
               -0.2)
})

context("Check binomial")

test_that("check bin_choose fails with invalid args and returns correct result", {
  
  expect_error(bin_choose(5, 6), 
               "k cannot be greater than n")
  expect_equal(bin_choose(5, 2), 
               10)
  expect_equal(bin_choose(5, 1:3), 
               c(5, 10, 10))
})

test_that("check bin_probability fails with invalid args and returns corrct results", {
  
  expect_error(bin_probability(6, 5, 0.3),
               "\nsuccess should be less or equal to trials")
  expect_equal(bin_probability(2, 5, 0.5), 
               0.3125)
  expect_equal(bin_probability(0:2, 5, 0.5), 
               c(0.03125, 0.15625, 0.31250))
})

test_that("check bin_distribution fails with invalid args and returns correct results", {
  
  expect_error(bin_distribution(5, 2),
               "\nprob should be a number between 0 and 1")
  expect_equal(bin_distribution(5, 0.5)$success,
               0:5)
  expect_equal(bin_distribution(5, 0.5)$probability, 
               c(0.03125, 0.15625, 0.31250, 0.31250, 0.15625, 0.03125))
  
})

test_that("check bin_cumulative fails with invalid args and returns correct results", {
  
  expect_error(bin_cumulative(-5, 2),
               "\ntrials should be a non-negative integer")
  expect_equal(bin_cumulative(5, 0.5)$success),
               0:5)
  expect_equal(bin_cumulative(5, 0.5)$cumulative),
               c(0.03125, 0.18750, 0.50000, 0.81250, 0.96875, 1.00000))
})

```