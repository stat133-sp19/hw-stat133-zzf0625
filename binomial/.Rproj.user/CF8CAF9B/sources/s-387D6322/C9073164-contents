---
title: "Workout03-cloris-zhang"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# 1.1) Private Checker Functions
```{r}
# a private auxiliary function check_prob() to test if an input prob is a valid probability value
check_prob <- function(prob) {
  if (!is.numeric(prob)) {
    stop('prob should be a number')
  }
  
  if (prob < 0 | prob > 1) {
    stop('p has to be a number betwen 0 and 1')
  }
  
  return (TRUE)
}

# a private auxiliary function check_trials() to test if an input trials is a valid value for number of trials (i.e. n is a non-negative integer).
check_trials <-function(trials) {
  if (!is.numeric(trials)) {
    stop('prob should be a number')
  }
  if (!trials%%1==0) {
    stop('prob should be an integer')
  }
  if (trials < 0) {
    stop('trials should be non-negative')
  }
  return(TRUE)
}
 
# a private auxiliary function check_success() to test if an input success is a valid value for number of successes 
check_success <- function(success, trials) {
  if (!is.numeric(success)) {
    stop('success should be a vector of number(s)')
  }
  if (prod(success%%1==0) != 1) {
    stop('success should be a vector of integer(s)')
  }
  if (prod(success >= 0) != 1) {
    stop('success should be non-negative')
  } 
  if(prod(success <= trials) != 1) {
    stop('success cannot be greater than trials')
  }
    return(TRUE)

}
```

# 1.2) Private Auxiliary Functions
```{r}

aux_mean <- function(trials, prob) {
  return (trials*prob)
}

aux_variance <- function(trials, prob) {
  return (trials*prob*(1-prob))
}

aux_mode <- function(trials, prob){
  num <- trials*prob + prob
  if(num%%1==0){
    return (c(num, num-1))
  }
  return (floor(num))
  
}

aux_skewness <- function(trials, prob) {
  sd <- sqrt(trials*prob*(1-prob))
  return ((1-2*prob)/sd)
}

aux_kurtosis <- function(trials, prob) {
  var <- trials*prob*(1-prob)
  numer <- 1-6*prob*(1-prob)
  return(numer/var)
}

#Tests
aux_mean(10, 0.3)
aux_variance(10, 0.3)
aux_mode(10, 0.3)
aux_skewness(10, 0.3)
aux_kurtosis(10, 0.3)
```

# 1.3) Function bin_choose()
```{r}
bin_choose <- function(n, k) {
  if (prod(k <= n) !=1) {
    stop('k cannot be greater than n')
  }
  up <- factorial(n)
  down <- factorial(k)*factorial(n-k)
  return (up/down)
}

# Test
bin_choose(n = 5, k = 2)
bin_choose(5, 0)
bin_choose(5, 1:3)

#errorbin_choose(1, 1:2)

```

# 1.4) Function bin_probability()
```{r}
bin_probability <- function(success, trials, prob) {
  if (check_trials(trials) != TRUE) {
    stop('invalid trials value')
  }
  if (!check_prob(prob)) {
    stop('invalid success value')
  }
  if (!check_success(success, trials)) {
    stop('invalid success value')
  }
  ans <- bin_choose(trials, success) * prob^success * (1-prob)^(trials-success)
  return (ans)
}
# Tests
# probability of getting 2 successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(success = 2, trials = 5, prob = 0.5)

# probabilities of getting 2 or less successes in 5 trials
# (assuming prob of success = 0.5)
bin_probability(success = 0:2, trials = 5, prob = 0.5)

# 55 heads in 100 tosses of a loaded coin with 45% chance of heads
bin_probability(success = 55, trials = 100, prob = 0.45)
```

# 1.5) Function bin_distribution()
```{r}
bin_distribution <- function(trials, prob) {
  success <- 0:trials
  probability <- bin_probability(success, trials, prob)
  dat <- as.data.frame(cbind(success, probability))
  class(dat) <- c("bindis","data.frame")
  return (dat)
}

# binomial probability distribution
bin_distribution(trials = 5, prob = 0.5)

plot.bindis <- function(dat) {
prob <- dat$probability
names(prob) <- dat$success
barplot(prob, border = NA)
}

# plotting binomial probability distribution
dis1 <- bin_distribution(trials = 5, prob = 0.5)
plot.bindis(dis1)
```

# 1.6) Function bin_cumulative()
```{r}
bin_cumulative <- function(trials, prob) {
  dat <- bin_distribution(trials, prob) %>%
    mutate(cumulative = cumsum(probability))
  class(dat) <- c("bincum", "data.frame")
  return(dat)
}

# binomial cumulative distribution
bin_cumulative(trials = 5, prob = 0.5)

plot.bincum <- function(dat) {
  cum <- dat$cumulative

plot(dat$success, cum, type='o')
}

# plotting binomial cumulative distribution
dis2 <- bin_cumulative(trials = 5, prob = 0.5)
plot.bincum(dis2)
```

# 1.7) Function bin_variable()
```{r}
bin_variable <- function(trials, prob) {
  if (!check_trials(trials)) {
    stop('invalid trials value')
  }
  if(!check_prob(prob)) {
    stop('invalid prob value')
  }
  lst <- list(trials = trials, prob = prob)
  class(lst) <- 'binvar'
  return(lst)
}

# print method for object of class "toss"
print.binvar <- function(x, ...) {
  cat('"Binomial variable"')
  cat('\n\n Parameters')
  cat('\n - number of trials: ')
  cat(x$trial)
  cat('\n - prob of success : ')
  cat(x$prob)
  
  invisible(x)
}
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1

summary.binvar <- function(x,...){
  
  
}

```

